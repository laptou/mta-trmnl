---
import { DurationFormat } from "@formatjs/intl-durationformat";
import { Temporal } from "temporal-polyfill";
import type { Route, StopTime } from "../util/mta";
import RouteBadge from "./route-badge.astro";

interface Props {
  route?: Route;
  arrivals: StopTime[];
}

const now = Temporal.Now.plainDateTime(
  "gregory",
  "America/New_York",
).toPlainTime();

const timeFmt = new Intl.DateTimeFormat(undefined, { timeStyle: "short" });

const fmtTime = (time: Temporal.PlainTime) => {
  return timeFmt.format(new Date(0, 0, 0, time.hour, time.minute, time.second));
};

const durationFmt = new DurationFormat(undefined, {});

const fmtDuration = (duration: Temporal.Duration) => {
  if (duration.sign < 0) {
    duration = duration.add("P1D");
  }

  const rounded = duration.round({
    smallestUnit: "minute",
    roundingMode: "floor",
  });
  if (rounded.total("minute") < 1) return "Now";
  return durationFmt.format(rounded);
};
---

{
  Astro.props.arrivals.length > 0 ? (
    <ul class="space-y-1">
      {Astro.props.arrivals.map((arrival) => (
        <li>
          <RouteBadge routeId={arrival.route} />{" "}
          <span>{fmtDuration(arrival.departureTime.since(now))}</span>{" "}
          <span class="text-sm">{fmtTime(arrival.departureTime)}</span>{" "}
          {arrival.isRealtimeUpdated ? "âš¡" : ""}
        </li>
      ))}
    </ul>
  ) : (
    <p class="text-gray-500">
      {Astro.props.route ? (
        <>No upcoming {Astro.props.route.routeShortName} trains</>
      ) : (
        <>No upcoming trains</>
      )}
    </p>
  )
}
